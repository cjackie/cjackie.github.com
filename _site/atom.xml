<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Chaojie's Blog</title>
 <link href="http://cjackie.github.com/atom.xml" rel="self"/>
 <link href="http://cjackie.github.com/"/>
 <updated>2014-07-27T17:01:24-04:00</updated>
 <id>http://cjackie.github.com</id>
 <author>
   <name>Chaojie Wang</name>
   <email></email>
 </author>

 
 <entry>
   <title>Email</title>
   <link href="http://cjackie.github.com/2014/07/17/email/"/>
   <updated>2014-07-17T00:00:00-04:00</updated>
   <id>http://cjackie.github.com/2014/07/17/email</id>
   <content type="html">&lt;h4&gt;I just wanna send a freaking email&lt;/h4&gt;

&lt;p&gt;Today at work, we tried to make a alarm for our arduino system. It&amp;#39;s going to be text message or email. Ironically, arduino with gsm connect from T-mobile won&amp;#39;t be able to send the message! So, we had to found another way.&lt;/br&gt;
We knew how to make a http connection through arduino gsm shield. So, we are going to take that as the base to send some kind of &amp;quot;alarm&amp;quot;. Here are some proposals we had:
- find a vendor that will provide restful API to send email or text message
- connect email directly from arduino.&lt;/p&gt;

&lt;p&gt;As a result, we spent a lot of time looking for a good vendor.. Good means free vendor. LMAO. It turned out they all need monthly fee, which is very cheap. After exploring their APIs, which obviously has not arduino support. So we had to found out how http request API works underneath the hood, which I&amp;#39;m very glad we did. In this process, we, at least I, learned alot about http protocol and how it works.&lt;/p&gt;

&lt;h4&gt;How http works.&lt;/h4&gt;

&lt;p&gt;Have worked with http for a long time, sometimes I just forgot that It&amp;#39;s just a protocol(an agreement between server and client how they communicate). Many website offers API for different programming languages to make http request, but at the end, they all become plain text(later zeros and ones) and get send over to the other. If you keep this in mind, You will know that, as long as you can get a text sent over network, you will be able to request info from other websites. Wow, this is powerful, you don&amp;#39;t need abstractions provided by modules/library of different languages. &lt;/br&gt;
Now, let&amp;#39;s talk about how http works. We are all familliar with http in browsers - You enter a web url, and hit enter, and wola there is a beautiful webpage. What&amp;#39;s going on is http is being sent over the network. There are two type of http request, one is POST, the other is GET. HTTP contains lots of headers to describe what kind of request is. For example Content-Type specifies what kind of content the request body has. It would be json, html and so on. Headers are important, and they are often hidden away from developers when they use a module or library for http. As a result, when you write an application on top of HTTP using those modules/libraries, things will work and feel like magic, but at the end it&amp;#39;s just a http being past back and forth. I&amp;#39;m glad I can make this observation.&lt;/p&gt;

&lt;h4&gt;Another way, send an email directly from arduino&lt;/h4&gt;

&lt;p&gt;At the end, we are able to send a text message using third party&amp;#39;s RESTful API (In fact this is very easy to implement on their part, because mobile carriers have specified a way to send text by sending an email to a specific location). However it wasn&amp;#39;t free. And, my partner has found a way to send the email directly from telnet without any authenication. wow!!! what! yes, you heard it right. that actually surprised me. Then I try it with telnet, then i was able to send a freaking email to myself. I specified It was sent from my own address without any authenication. But, the email was labeled &amp;quot;might not be sent from the user&amp;quot;. Okay, That makes sense. otherwise how broken is the email system! However it doesn&amp;#39;t display that message on the mobile, which is concerning. After digging more info about email, I sort of got how the email system worked. they are sent using SMTP protocol. And using telnet, you can connect to google email server and instruct it to send an email. What&amp;#39;s more, I learned that telnet uses port 25. And many protocol like ssh, whois protocol and alot of more unheard protocols have their own specified ports. wow, That means I can use it to connect to different ports and use different functionalities of a server. That&amp;#39;s awesome!&lt;/br&gt;
Back to the arduino, we didn&amp;#39;t make it make on arduino.. We think it might have something to do with that the fact that we uses gsm and the google mail server will deny the access. But I think it&amp;#39;s worth it. Because I learned a lot in the process.&lt;/p&gt;

&lt;h4&gt;Ending&lt;/h4&gt;

&lt;p&gt;...... good luck tomorrow.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How html, css and js work in browsers</title>
   <link href="http://cjackie.github.com/2014/07/09/www/"/>
   <updated>2014-07-09T00:00:00-04:00</updated>
   <id>http://cjackie.github.com/2014/07/09/www</id>
   <content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;We often take things for granted, and web is one of them. Lots of things going on behind the scene when you open up a website. Once you understand what&amp;#39;s going on underneath the hook, you will be able to optimize your website, and make the best out of browsers.&lt;/p&gt;

&lt;h3&gt;Brief History&lt;/h3&gt;

&lt;p&gt;At the beginning of Internet, Browsers were implemented to process a protocol called HTTP. Back then, web pages were all static, which means once you load the content, it won&amp;#39;t change. Then Javascript came around, which makes it possible to change elements on the page dynamically. Javascript wasn&amp;#39;t taken seriously until the book called JavaScript: The Good Parts in 2008. Later we saw a huge progress in web is made in last few years. Websites became more interactive, more dynamic, and more complex. &lt;/p&gt;

&lt;h3&gt;How websites work in browsers&lt;/h3&gt;

&lt;p&gt;Here I&amp;#39;m going to make a over-simplified version of what&amp;#39;s going on. Although different browsers works different, but they all follow more or less same blue-print. First, when you open up the url, a HTTP request will be sent. A remote Server will receive the request, process it and then return a HTTP response. The response can contain any data. The browser will parse the response and determine what it is. Let&amp;#39;s say it&amp;#39;s a html. The browser will be start to parse the html into DOM tree. In this process, if it might send out more HTTP request to get javascripts, css, images and so on. Some request will block the contructing process, for example, css and javascript if you don&amp;#39;t make it async or defer. Upon getting css files, the browser will contructing CSSOM , another tree-like constructure. Taken the DOM and CSSOM, the browser will start to render the page. Since there is javacript, which can modify DOM and CSSOM, page might be rendered over time. which makes it dynamic.&lt;/p&gt;

&lt;h3&gt;Some usefully strategies to minimize latency of websites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Minimize data being transfer over to clients. for example compress css, js and html.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t block contructing DOM process. for example, make js asyn. make less HTTP request.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>一些感想</title>
   <link href="http://cjackie.github.com/2014/07/05/mindset/"/>
   <updated>2014-07-05T00:00:00-04:00</updated>
   <id>http://cjackie.github.com/2014/07/05/mindset</id>
   <content type="html">&lt;p&gt;前几天，我在hacker news上看到一个人的&lt;a href=&quot;https://medium.com/@maebert/9-things-i-learned-as-a-software-engineer-c2c9f76c9266&quot;&gt;博客&lt;/a&gt;，我感觉挺值得分享的。在他那个博客里，主要说了自己在做程序员那段时间里所学到的9点东西。在那9样中，我感觉第一项与第八项目最为重要了。&lt;br&gt;
第一项，他说，Intelligence is overrated。中文来说就是，一个人的智商其实没那么重要。我非常的同意这一点。一个人如果很聪明，他考试可以考的很好，学起来可以十分的轻松。对于脑袋不是很灵活的人，可能他学的比较吃力，学不好。不过，后者很可能会比前者学到很多更重要的东西：努力，坚持不懈，等等。在社会中，后者也更容易适应下来。对于学习一帆风顺的人，一旦面对困难就很容易退缩下来。然而，在社会里，困难挫折这多不能免掉的。相对于聪明，努力与坚持不懈的品格的人更容易成功（事业上）。&lt;br&gt;
第八项，自己看吧。我总是做不到的一项。不过我会努力去做到的。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ways to handle asynchronous code in Javascript</title>
   <link href="http://cjackie.github.com/2014/07/01/handleAsyncCode/"/>
   <updated>2014-07-01T00:00:00-04:00</updated>
   <id>http://cjackie.github.com/2014/07/01/handleAsyncCode</id>
   <content type="html">&lt;p&gt;Yesterday, I came across function generators in Javascript, which is very similar to Python&amp;#39;s function generator. The function generator is characterized by the keyword &lt;code&gt;yield&lt;/code&gt;, which will suspend the function when it&amp;#39;s called with &lt;code&gt;next()&lt;/code&gt;. That&amp;#39;s my simple understanding of function generator. I think it&amp;#39;s trying to mimic lazy evaluation in languages like Haskell, and this makes infinite data structure easy to be expressed. &lt;br&gt;
Anyway, I found function generator was because I found &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;koa&lt;/a&gt; is using this new feature from Ecmascript 6 to construct async codes in a sync way. I didn&amp;#39;t understand how koa can achieve it using &lt;code&gt;yield&lt;/code&gt; at first (even though I understand function generator). But after I searched more info about it, I started to understand it. From what I understand, koa take all generator functions and call them behind the scene until no more yield. I think it&amp;#39;s very neat solution to avoid callback hell and makes asynchronous code more readable if you want to make them execute in a synchronous way. Many solutions have been invented by very smart people in Javascript community, noticeably using promise. libraries like &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q&lt;/a&gt; has been able to solve the same problem quite well. This is quite popular, I saw it many times. However, comparing function generator and promise, I think function generator is better to solve sync problems.&lt;br&gt;
Reason 1: function generator is light weight and it&amp;#39;s implemented in native code, as suppose to library. So I will assume it has better performance.&lt;br&gt;
Reason 2: control flow using function generator looks more imperative.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;//using co library
co(function* () {
  var text = yield readFile();
  var webpage = yield get('google.com');
  console.log(text);
  console.log(webpage);
})();

//above is not valid code, just use to illustrate concept.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;whereas, you use promise it will look something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;//using library Q
Q.fcall(readFile)
.then(function (text) {
  console.log(text);
  return get('google.com');
}).then(....) 

//above is not valid code, just use to illustrate the concept
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if a person who is not familiar with callback, he or she will be likely to understand first one. indeed, I think the first looks more natural. you just think of it execute step by step. yield will pause the function until async function is finished. Promise approach tries to use &lt;code&gt;then&lt;/code&gt; sugar to make it appear more natural, but you still need to think about callback(maybe I&amp;#39;m wrong). Anyway, yield appears more natural.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;haha, ecmascript 6 is comming up. lots of new things will be added to the language, like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;for of&lt;/code&gt;, some standard &lt;code&gt;collections&lt;/code&gt; and more. Let&amp;#39;s see how it&amp;#39;s gonna be. looking forward to it. :smile:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Aspect-Oriented Programming in Javascript</title>
   <link href="http://cjackie.github.com/2014/06/25/AOP_in_javacript/"/>
   <updated>2014-06-25T00:00:00-04:00</updated>
   <id>http://cjackie.github.com/2014/06/25/AOP_in_javacript</id>
   <content type="html">&lt;h2&gt;Aspect-Oriented Programming&lt;/h2&gt;

&lt;p&gt;It might sound complicated, but the idea is in fact very simple, which is adding new behavior to a function. This can be done using in object-oriented way, but for some problems, AOP is a better solution. Let&amp;#39;s say you would like to print something before the call, and print something after that call for debugging purposes. Of course you can just make a subclass and add those functionality. However, it feels very unnatural. With AOP, it&amp;#39;s straight forward: add one behavior before the call and another one after the call. The abstraction really free you from thinking details about class relationships, and other methods, and make you focus more on what the code does.&lt;br&gt;
  Let&amp;#39;s give an example of AOP:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function Person(name) { 
  this.name = name
}

Person.prototype.say = funciton() {
  console.log(this.name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you make an &amp;#39;instance&amp;#39; of it (in reality, better call it create a new an object)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;var jack = new Person('jack');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you change you mind and say, &amp;quot;you know what, let&amp;#39;s say &amp;#39;hello everyone&amp;#39; before say the name&amp;quot;. You just want to change the &lt;code&gt;say&lt;/code&gt; function, nothing else.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;var say = jack.say;
jack.say = function() {
  console.log('hello everyone');
  say.call(jack);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to closure, it works. That&amp;#39;s it, 4 lines of codes. Now, whenever jack call &lt;code&gt;say&lt;/code&gt; function, it will print out &amp;#39;hello everyone&amp;#39;, before whatever old method say does. Wow, this is neat. &lt;br&gt;
Let&amp;#39;s break it down here. &lt;code&gt;var say = jack.say;&lt;/code&gt; this is used to save the reference to original &lt;code&gt;say&lt;/code&gt; function. then we redefine the &lt;code&gt;say&lt;/code&gt; function for jack, &lt;code&gt;jack.say = function() {...};&lt;/code&gt;. Inside the function, we will say hello to every, &lt;code&gt;console.log(&amp;#39;hello everyone&amp;#39;);&lt;/code&gt;, then call the original function &lt;code&gt;say.call(jack);&lt;/code&gt;. &lt;code&gt;say.call(jack);&lt;/code&gt; is the way to invoke the old function, you might wonder why don&amp;#39;t we just invoke the function like &lt;code&gt;say()&lt;/code&gt;. This is because that &lt;code&gt;say&lt;/code&gt; has different context, when it should be within the &lt;code&gt;jack&lt;/code&gt; context. so we need to reinforce the context by using the method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;call&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
